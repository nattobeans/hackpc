CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];
    
    PARTS:
    Not(in=sel[0], out=notsel0);
    Not(in=sel[1], out=notsel1);

    And(a=notsel1, b=notsel0, out=sela);
    And(a=notsel1, b=sel[0], out=selb);
    And(a=sel[1], b= notsel0, out=selc);
    And(a=sel[1], b=sel[0], out=seld);    

    Mux16(a=false, b=a, sel=sela, out=outa);
    Mux16(a=false, b=b, sel=selb, out=outb);
    Mux16(a=false, b=c, sel=selc, out=outc);
    Mux16(a=false, b=d, sel=seld, out=outd);
    
    // And16(a=a, b=sela16, out=outa);
    // And16(a=b, b=selb16, out=outb);
    // And16(a=c, b=selc16, out=outc);
    // And16(a=d, b=seld16, out=outd);

    Or16(a=outa, b=outb, out=outaOrb);
    Or16(a=outc, b=outd, out=outcOrd);

    Or16(a=outaOrb, b=outcOrd, out=out);

// Found out there is true and false
    // And(a=a[0], b=sela, out=outa0);
    // And(a=a[1], b=sela, out=outa1);
    // And(a=a[2], b=sela, out=outa2);
    // And(a=a[3], b=sela, out=outa3);
    // And(a=a[4], b=sela, out=outa4);
    // And(a=a[5], b=sela, out=outa5);
    // And(a=a[6], b=sela, out=outa6);
    // And(a=a[7], b=sela, out=outa7);
    // And(a=a[8], b=sela, out=outa8);
    // And(a=a[9], b=sela, out=outa9);
    // And(a=a[10], b=sela, out=outa10);
    // And(a=a[11], b=sela, out=outa11);
    // And(a=a[12], b=sela, out=outa12);
    // And(a=a[13], b=sela, out=outa13);
    // And(a=a[14], b=sela, out=outa14);
    // And(a=a[15], b=sela, out=outa15);

    // And(b=b[0], b=selb, out=outb0);
    // And(b=b[1], b=selb, out=outb1);
    // And(b=b[2], b=selb, out=outb2);
    // And(b=b[3], b=selb, out=outb3);
    // And(b=b[4], b=selb, out=outb4);
    // And(b=b[5], b=selb, out=outb5);
    // And(b=b[6], b=selb, out=outb6);
    // And(b=b[7], b=selb, out=outb7);
    // And(b=b[8], b=selb, out=outb8);
    // And(b=b[9], b=selb, out=outb9);
    // And(b=b[10], b=selb, out=outb10);
    // And(b=b[11], b=selb, out=outb11);
    // And(b=b[12], b=selb, out=outb12);
    // And(b=b[13], b=selb, out=outb13);
    // And(b=b[14], b=selb, out=outb14);
    // And(b=b[15], b=selb, out=outb15);

    // And(c=c[0], c=selc, out=outc0);
    // And(c=c[1], c=selc, out=outc1);
    // And(c=c[2], c=selc, out=outc2);
    // And(c=c[3], c=selc, out=outc3);
    // And(c=c[4], c=selc, out=outc4);
    // And(c=c[5], c=selc, out=outc5);
    // And(c=c[6], c=selc, out=outc6);
    // And(c=c[7], c=selc, out=outc7);
    // And(c=c[8], c=selc, out=outc8);
    // And(c=c[9], c=selc, out=outc9);
    // And(c=c[10], c=selc, out=outc10);
    // And(c=c[11], c=selc, out=outc11);
    // And(c=c[12], c=selc, out=outc12);
    // And(c=c[13], c=selc, out=outc13);
    // And(c=c[14], c=selc, out=outc14);
    // And(c=c[15], c=selc, out=outc15);

    // And(d=d[0], d=seld, out=outd0);
    // And(d=d[1], d=seld, out=outd1);
    // And(d=d[2], d=seld, out=outd2);
    // And(d=d[3], d=seld, out=outd3);
    // And(d=d[4], d=seld, out=outd4);
    // And(d=d[5], d=seld, out=outd5);
    // And(d=d[6], d=seld, out=outd6);
    // And(d=d[7], d=seld, out=outd7);
    // And(d=d[8], d=seld, out=outd8);
    // And(d=d[9], d=seld, out=outd9);
    // And(d=d[10], d=seld, out=outd10);
    // And(d=d[11], d=seld, out=outd11);
    // And(d=d[12], d=seld, out=outd12);
    // And(d=d[13], d=seld, out=outd13);
    // And(d=d[14], d=seld, out=outd14);
    // And(d=d[15], d=seld, out=outd15);
}