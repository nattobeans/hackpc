CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    Not(in=sel[0], out=notsel0);
    Not(in=sel[1], out=notsel1);
    Not(in=sel[2], out=notsel2);

    And(a=notsel0, b=notsel1, out=partsela);
    And(a=partsela, b=notsel2, out=sela);
    
    And(a=sel[0], b=notsel1, out=partselb);
    And(a=partselb, b=notsel2, out=selb);
    
    And(a=notsel0, b=sel[1], out=partselc);
    And(a=partselc, b=notsel2, out=selc);
    
    And(a=sel[0], b=sel[1], out=partseld);
    And(a=partseld, b=notsel2, out=seld);

    And(a=notsel0, b=notsel1, out=partsele);
    And(a=partsele, b=sel[2], out=sele);

    And(a=sel[0], b=notsel1, out=partself);
    And(a=partself, b=sel[2], out=self);

    And(a=notsel0, b=sel[1], out=partselg);
    And(a=partselg, b=sel[2], out=selg);

    And(a=sel[0], b=sel[1], out=partselh);
    And(a=partselh, b=sel[2], out=selh);

    And(a=in, b=sela, out=a);
    And(a=in, b=selb, out=b);
    And(a=in, b=selc, out=c);
    And(a=in, b=seld, out=d);
    And(a=in, b=sele, out=e);
    And(a=in, b=self, out=f);
    And(a=in, b=selg, out=g);
    And(a=in, b=selh, out=h);
}