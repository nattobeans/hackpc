CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Not(in=sel[0], out=notsel0);
    Not(in=sel[1], out=notsel1);
    Not(in=sel[2], out=notsel2);

    And(a=notsel0, b=notsel1, out=partsela);
    And(a=partsela, b=notsel2, out=sela);
    
    And(a=sel[0], b=notsel1, out=partselb);
    And(a=partselb, b=notsel2, out=selb);
    
    And(a=notsel0, b=sel[1], out=partselc);
    And(a=partselc, b=notsel2, out=selc);
    
    And(a=sel[0], b=sel[1], out=partseld);
    And(a=partseld, b=notsel2, out=seld);

    And(a=notsel0, b=notsel1, out=partsele);
    And(a=partsele, b=sel[2], out=sele);

    And(a=sel[0], b=notsel1, out=partself);
    And(a=partself, b=sel[2], out=self);

    And(a=notsel0, b=sel[1], out=partselg);
    And(a=partselg, b=sel[2], out=selg);

    And(a=sel[0], b=sel[1], out=partselh);
    And(a=partselh, b=sel[2], out=selh);

    Mux16(a=false, b=a, sel=sela, out=outa);
    Mux16(a=false, b=b, sel=selb, out=outb);
    Mux16(a=false, b=c, sel=selc, out=outc);
    Mux16(a=false, b=d, sel=seld, out=outd);
    Mux16(a=false, b=e, sel=sele, out=oute);
    Mux16(a=false, b=f, sel=self, out=outf);
    Mux16(a=false, b=g, sel=selg, out=outg);
    Mux16(a=false, b=h, sel=selh, out=outh);

    Or16(a=outa, b=outb, out=outaOrb);
    Or16(a=outc, b=outd, out=outcOrd);
    Or16(a=oute, b=outf, out=outeOrf);
    Or16(a=outg, b=outh, out=outgOrh);

    Or16(a=outaOrb, b=outcOrd, out=outabOrcd);
    Or16(a=outeOrf, b=outgOrh, out=outefOrgh);

    Or16(a=outabOrcd, b=outefOrgh, out=out);
}